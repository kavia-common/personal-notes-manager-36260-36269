{"is_source_file": true, "format": "Python", "description": "This file defines an in-memory thread-safe repository class for managing notes, with methods for listing, retrieving, creating, updating, and deleting notes, using data models and schemas from the project.", "external_files": ["../models", "../schemas"], "external_methods": ["datetime.now", "uuid4"], "published": ["NotesRepository"], "classes": [{"name": "NotesRepository", "description": "In-memory repository for notes with thread safety, providing methods to manipulate note data."}], "methods": [{"name": "None __init__(self)", "description": "Initializes the repository with an empty dictionary and a re-entrant lock.", "scope": "NotesRepository", "scopeKind": "class"}, {"name": "Tuple[List[Note],int] list_notes(self, offset: int = 0, limit: int = 100)", "description": "Returns a slice of notes and total count, with optional offset and limit for pagination.", "scope": "NotesRepository", "scopeKind": "class"}, {"name": "Optional[Note] get_note(self, note_id: UUID)", "description": "Retrieves a note by its UUID, or None if not found.", "scope": "NotesRepository", "scopeKind": "class"}, {"name": "Note create_note(self, payload: NoteCreate)", "description": "Creates a new Note object with a generated UUID and current timestamp, adding it to the repository.", "scope": "NotesRepository", "scopeKind": "class"}, {"name": "Optional[Note] update_note(self, note_id: UUID, payload: NoteUpdate)", "description": "Updates an existing note's title and/or content, updating the 'updated_at' timestamp, or returns None if the note does not exist.", "scope": "NotesRepository", "scopeKind": "class"}, {"name": "bool delete_note(self, note_id: UUID)", "description": "Deletes a note by UUID, returning True if deletion was successful.", "scope": "NotesRepository", "scopeKind": "class"}], "calls": ["datetime.now", "uuid4", "list", "sort", "pop"], "search-terms": ["NotesRepository", "thread safety", "in-memory notes", "note management", "repository pattern"], "state": 2, "file_id": 9, "knowledge_revision": 23, "git_revision": "", "revision_history": [{"20": ""}, {"23": ""}], "ctags": [{"_type": "tag", "name": "NotesRepository", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36260-36269/notes_backend/src/db/notes_repository.py", "pattern": "/^class NotesRepository:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36260-36269/notes_backend/src/db/notes_repository.py", "pattern": "/^    def __init__(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "NotesRepository", "scopeKind": "class"}, {"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36260-36269/notes_backend/src/db/notes_repository.py", "pattern": "/^    def create_note(self, payload: NoteCreate) -> Note:$/", "language": "Python", "typeref": "typename:Note", "kind": "member", "signature": "(self, payload: NoteCreate)", "scope": "NotesRepository", "scopeKind": "class"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36260-36269/notes_backend/src/db/notes_repository.py", "pattern": "/^    def delete_note(self, note_id: UUID) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, note_id: UUID)", "scope": "NotesRepository", "scopeKind": "class"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36260-36269/notes_backend/src/db/notes_repository.py", "pattern": "/^    def get_note(self, note_id: UUID) -> Optional[Note]:$/", "language": "Python", "typeref": "typename:Optional[Note]", "kind": "member", "signature": "(self, note_id: UUID)", "scope": "NotesRepository", "scopeKind": "class"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36260-36269/notes_backend/src/db/notes_repository.py", "pattern": "/^    def list_notes(self, offset: int = 0, limit: int = 100) -> Tuple[List[Note], int]:$/", "language": "Python", "typeref": "typename:Tuple[List[Note],int]", "kind": "member", "signature": "(self, offset: int = 0, limit: int = 100)", "scope": "NotesRepository", "scopeKind": "class"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36260-36269/notes_backend/src/db/notes_repository.py", "pattern": "/^    def update_note(self, note_id: UUID, payload: NoteUpdate) -> Optional[Note]:$/", "language": "Python", "typeref": "typename:Optional[Note]", "kind": "member", "signature": "(self, note_id: UUID, payload: NoteUpdate)", "scope": "NotesRepository", "scopeKind": "class"}], "hash": "c960bc5b83c16bf2e84270a1bbf062f2", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/db/notes_repository.py"}